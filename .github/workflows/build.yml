name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  # –°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - os: linux
            arch: amd64
            binary_name: cloudbridge-client-linux-amd64
          - os: linux
            arch: arm64
            binary_name: cloudbridge-client-linux-arm64
          # Windows
          - os: windows
            arch: amd64
            binary_name: cloudbridge-client-windows-amd64.exe
          - os: windows
            arch: arm64
            binary_name: cloudbridge-client-windows-arm64.exe
          # macOS
          - os: darwin
            arch: amd64
            binary_name: cloudbridge-client-darwin-amd64
          - os: darwin
            arch: arm64
            binary_name: cloudbridge-client-darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build binary
        run: |
          VERSION=$(git describe --tags --always --dirty)
          LDFLAGS="-X main.Version=${VERSION} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.GitCommit=$(git rev-parse HEAD)"
          
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -ldflags "${LDFLAGS}" \
            -o build/${{ matrix.binary_name }} \
            ./cmd/cloudbridge-client

      - name: Build mock relay
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -o build/mock_relay-${{ matrix.os }}-${{ matrix.arch }} \
            ./test/mock_relay

      - name: Create checksums
        run: |
          cd build
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            sha256sum ${{ matrix.binary_name }} > ${{ matrix.binary_name }}.sha256
          else
            shasum -a 256 ${{ matrix.binary_name }} > ${{ matrix.binary_name }}.sha256
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/${{ matrix.binary_name }}
            build/${{ matrix.binary_name }}.sha256
            build/mock_relay-${{ matrix.os }}-${{ matrix.arch }}
          retention-days: 30

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –ø—Ä–∏ push –≤ main
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate version
        id: version
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
          COMMIT_COUNT=$(git rev-list --count HEAD)
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –∫–æ–º–º–∏—Ç–∞
          SHORT_SHA=$(git rev-parse --short HEAD)
          # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.0.0+{commit_count}.{short_sha}
          VERSION="1.0.0+${COMMIT_COUNT}.${SHORT_SHA}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Generate release notes
        id: release_notes
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
          COMMITS=$(git log --oneline -10)
          NOTES="## üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ ${VERSION}\n\n"
          NOTES+="### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n"
          NOTES+="$(echo "$COMMITS" | sed 's/^/- /')\n\n"
          NOTES+="### üì¶ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏:\n"
          NOTES+="- Linux AMD64\n"
          NOTES+="- Linux ARM64\n"
          NOTES+="- Windows AMD64\n"
          NOTES+="- macOS AMD64\n"
          NOTES+="- macOS ARM64\n\n"
          NOTES+="### üîó –°—Å—ã–ª–∫–∏:\n"
          NOTES+="- [–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥](https://github.com/${{ github.repository }})\n"
          NOTES+="- [Issues](https://github.com/${{ github.repository }}/issues)\n"
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create auto release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Auto Release ${{ steps.version.outputs.version }}"
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            artifacts/binaries-linux-amd64/build/cloudbridge-client-linux-amd64
            artifacts/binaries-linux-arm64/build/cloudbridge-client-linux-arm64
            artifacts/binaries-windows-amd64/build/cloudbridge-client-windows-amd64.exe
            artifacts/binaries-darwin-amd64/build/cloudbridge-client-darwin-amd64
            artifacts/binaries-darwin-arm64/build/cloudbridge-client-darwin-arm64
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –ø—Ä–∏ —Ç–µ–≥–∞—Ö
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "cloudbridge-client-*" | sort

      - name: Generate release notes
        id: release_notes
        run: |
          # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --oneline ${PREVIOUS_TAG}..HEAD)
          else
            COMMITS=$(git log --oneline -20)
          fi
          
          NOTES="## üéâ –†–µ–ª–∏–∑ ${TAG_NAME}\n\n"
          NOTES+="### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n"
          NOTES+="$(echo "$COMMITS" | sed 's/^/- /')\n\n"
          NOTES+="### üì¶ –°–æ–±—Ä–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏:\n"
          NOTES+="- Linux AMD64\n"
          NOTES+="- Linux ARM64\n"
          NOTES+="- Windows AMD64\n"
          NOTES+="- macOS AMD64\n"
          NOTES+="- macOS ARM64\n\n"
          NOTES+="### üîó –°—Å—ã–ª–∫–∏:\n"
          NOTES+="- [–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥](https://github.com/${{ github.repository }})\n"
          NOTES+="- [Issues](https://github.com/${{ github.repository }}/issues)\n"
          NOTES+="- [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](https://github.com/${{ github.repository }}/blob/main/README.md)\n"
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ github.ref_name }}"
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            artifacts/binaries-linux-amd64/build/cloudbridge-client-linux-amd64
            artifacts/binaries-linux-arm64/build/cloudbridge-client-linux-arm64
            artifacts/binaries-windows-amd64/build/cloudbridge-client-windows-amd64.exe
            artifacts/binaries-darwin-amd64/build/cloudbridge-client-darwin-amd64
            artifacts/binaries-darwin-arm64/build/cloudbridge-client-darwin-arm64
          generate_release_notes: false
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 