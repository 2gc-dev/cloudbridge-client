name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Install tools
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v2.2.2
        format: github-actions
        args: --timeout=5m
        
    - name: Run security checks
      run: |
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Try to install gosec using curl (most reliable method)
        echo "Installing gosec..."
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.22.5
        
        # Check if gosec is available
        if command -v gosec >/dev/null 2>&1; then
          echo "✅ gosec installed successfully"
          gosec ./...
        else
          echo "⚠️ gosec installation failed, skipping security checks"
        fi
        
    - name: Run unit tests
      run: |
        TESTING=true go test -v -short -coverprofile coverage.out ./...
        
    - name: Build components
      run: |
        make build-all
        
    - name: Build mock relay
      run: |
        go build -o mock_relay ./test/mock_relay
        
    - name: Run integration tests
      run: |
        # Start mock relay server
        ./mock_relay 8085 &
        sleep 3
        
        # Check if main services are available
        echo "Checking service availability..."
        nc -z localhost 3456 && echo "Main relay server (3456) is available" || echo "Main relay server (3456) is not available"
        nc -z localhost 8082 && echo "Relay API (8082) is available" || echo "Relay API (8082) is not available"
        nc -z localhost 8080 && echo "Keycloak (8080) is available" || echo "Keycloak (8080) is not available"
        
        # Run integration tests
        TESTING=true go test -v -tags=integration ./test/
        
        # Stop mock relay
        pkill -f mock_relay || true
        
    - name: Run benchmarks
      run: |
        go test -v -bench=. -benchmem ./pkg/...
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Generate coverage report
      run: |
        go tool cover -html coverage.out -o coverage.html
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Build for ${{ matrix.os }}/${{ matrix.arch }}
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        go build -ldflags="-s -w" -o cloudbridge-client-${{ matrix.os }}-${{ matrix.arch }} ./cmd/cloudbridge-client
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cloudbridge-client-${{ matrix.os }}-${{ matrix.arch }}
        path: cloudbridge-client-${{ matrix.os }}-${{ matrix.arch }}*

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/cloudbridge-client:latest
          ${{ secrets.DOCKER_USERNAME }}/cloudbridge-client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cloudbridge-client-linux-amd64
          cloudbridge-client-linux-arm64
          cloudbridge-client-windows-amd64.exe
          cloudbridge-client-darwin-amd64
          cloudbridge-client-darwin-arm64
          coverage-report/coverage.html
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 